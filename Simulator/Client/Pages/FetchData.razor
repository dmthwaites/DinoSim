@page "/fetchdata"
@using DinoSim.Shared
@using DinoSim.Shared.Dinosaurs
@using DinoSim.Shared.ProgramManagers
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject HttpClient Http
@inject IWebAssemblyHostEnvironment Environment

<PageTitle>Forest Simulator</PageTitle>

<h1>Forest</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_loading)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var plantGroup in _simRunner.Environment.Plants.GroupBy(_ => _.GetType().Name))
    {
        <div>
            <img
                class="plant-img"
                src="images/plants/@(plantGroup.Key).jpg"/>
            @(plantGroup.Key) x @plantGroup.Count()
        </div>
    }
    <div class="dino-list">
    @foreach (var dinosaur in _simRunner.Environment.Dinosaurs.Where(dino => dino.IsAlive))
    {
        <div class="dino">
            <div class="dino-name">@dinosaur.Name</div>
            <img class="dino-img"
                 src="@GetImage(dinosaur.Type)"/>
        </div>
    }
    </div>
    
    <button class="btn btn-primary" @onclick="RunCycle">Click me</button>
    <table class="table">
        <thead>
        <tr>
            <th>Log</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var eventText in _simRunner.EventLogger.Events.Reverse())
        {
            <tr>
                <td>@eventText</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private bool _loading = true;
    private SimRunner _simRunner;
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        _simRunner = new SimRunner();
        
        // _simRunner.Environment.Dinosaurs.Add(new DinosaurBase()
        // {
        //     Name = "Gary",
        //     Type = "Tyrannosaurus"
        // });
        // _simRunner.Environment.Dinosaurs.Add(new DinosaurBase()
        // {
        //     Name = "Brenda",
        //     Type = "Apatosaurus"
        // });
        // _simRunner.Environment.Dinosaurs.Add(new DinosaurBase()
        // {
        //     Name = "Littlen",
        //     Type = "Biggun"
        // });
        _loading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        // if (firstRender)
        // {
        //     await _simRunner.Run(10);
        // }
    }

    private void RunCycle()
    {
        _simRunner.RunCycle();
    }

    private string GetImage(string dinoType)
    {
        var fileName = string.Empty;
        switch (dinoType)
        {
            case "Raptor":
                fileName = "Raptor.webp";
                break;
            case "Apatosaurus":
                fileName = "Apatosaurus.webp";
                break;
            case "Pteranodon":
                fileName = "Pteranodon.webp";
                break;
            case "Stegosaurus":
                fileName = "Stegosaurus.webp";
                break;
            case "Triceratops":
                fileName = "Triceratops.webp";
                break;
            case "Tyrannosaurus":
                fileName = "Tyrannosaurus.webp";
                break;
            default:
                  fileName = "default.jpg";
                break;
        }

        return $"images/dinosaurs/{fileName}";
    }
}
